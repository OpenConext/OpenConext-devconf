---
#name: openconext-core
services:
  haproxy:
    image: ghcr.io/openconext/openconext-basecontainers/haproxy28:latest
    ports:
      - 80:80
      - 443:443
    # bind mount separate files because the haproxy config
    # directory also contains some static error files we do not want
    # in our repository
    volumes:
      - ./haproxy/haproxy.pem:/usr/local/etc/haproxy/haproxy.pem
      - ./haproxy/backends.map:/usr/local/etc/haproxy/backends.map:ro
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      coreconextdev:
        aliases:
          - engine.dev.openconext.local
          - engine-api.dev.openconext.local
          - profile.dev.openconext.local
          - userlifecycle.dev.openconext.local
          - manage.dev.openconext.local
          - connect.dev.openconext.local
          - voot.dev.openconext.local
          - pdp.dev.openconext.local
          - aa.dev.openconext.local
          - teams.dev.openconext.local
          - spdashboard.dev.openconext.local
          - mujina-idp.dev.openconext.local
          - invite.dev.openconext.local
          - welcome.dev.openconext.local
          - sbs.dev.openconext.local
          - spdashboard.dev.openconext.local
    hostname: haproxy.docker

  mariadb:
    image: mariadb:10.6
    environment:
      MYSQL_ROOT_PASSWORD: secret
    networks:
      coreconextdev:
    volumes:
      - ./dbschema:/docker-entrypoint-initdb.d
      - openconext_mariadb:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "-uroot", "-psecret", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10
    hostname: mariadb.docker
    ports:
      - 3306:3306

  mongo:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-secret}
      MONGO_REPLICA_SET_NAME: ${MONGODB_RS_NAME:-openconext}
    volumes:
      - ./mongo/:/docker-entrypoint-initdb.d/
      - openconext_mongodb:/data/db
    healthcheck:
      test: |
        # After starting, but before being used, we need to initialize the Mongo replication set
        # we abuse the healthcheck for that, because we need to check the health status anyway
        mongosh -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --eval '
          try {
            rs.status().ok;
          }
          catch ({ name, message }) {
            print("error:" + name);
            print("message:" + message);
            if (name=="MongoServerError" && message.includes("no replset config has been received")) {
              rs.initiate({
                _id : "${MONGODB_RS_NAME:-openconext}",
                members: [ { _id: 0, host: "mongodb:27017" } ]
              });
              rs.status().ok;
            }
          };
        '
      interval: 2s
      timeout: 3s
      retries: 5
    entrypoint: >
      bash -c '
          openssl rand -base64 756 > /keyfile \
          && chown mongodb:mongodb /keyfile \
          && chmod 400 /keyfile \
          && exec docker-entrypoint.sh $$@
      '
    command: |
      mongod --bind_ip_all --replSet ${MONGODB_RS_NAME:-openconext} --keyFile /keyfile
    restart: always
    ports:
      - "27017:27017"
    networks:
      coreconextdev:
    hostname: mongodb

  engine:
    image: ghcr.io/openconext/openconext-engineblock/openconext-engineblock:prod
    volumes:
      - ./:/config
    networks:
      coreconextdev:
    healthcheck:
      test: ["CMD", "curl", "--fail", "-s", "http://localhost/health"]
      interval: 10s
      timeout: 10s
      retries: 20
    hostname: engine.docker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_ENV:-false}
      - APP_SECRET=${APP_SECRET:?APP_SECRET is not set}

  profile:
    image: ghcr.io/openconext/openconext-profile/profile:prod
    environment:
      APP_ENV: prod
    volumes:
      - ./:/config
    networks:
      coreconextdev:
    hostname: profile.docker

  spdashboard:
    image: ghcr.io/surfnet/sp-dashboard/spdashboard:latest
    environment:
      APP_ENV: prod
    volumes:
      - ./:/config
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      coreconextdev:
    hostname: spdashboard.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy

  mujina-idp:
    image: ghcr.io/openconext/mujina/mujina-idp:8.0.12
    volumes:
      - ./:/config
    networks:
      coreconextdev:
    command: "--spring.config.location=/config/mujina/"
    hostname: mujina.docker

  managegui:
    image: ghcr.io/openconext/openconext-manage/manage-gui:latest
    environment:
      HTTPD_CSP: ""
      HTTPD_SERVERNAME: "manage.dev.openconext.local"
      OPENCONEXT_INSTANCENAME: "OpenConext dev"
      OPENCONEXT_ENGINE_LOGOUT_URL: "https://engine.dev.openconext.local/logout"
      OPENCONEXT_HELP_EMAIL: "support@openconext.org"
      SHIB_ENTITYID: "https://manage.dev.openconext.local/shibboleth"
      SHIB_REMOTE_ENTITYID: "https://engine.dev.openconext.local/authentication/idp/metadata"
      SHIB_REMOTE_METADATA: "https://engine.dev.openconext.local/authentication/idp/metadata"
    volumes:
      - ./:/config
    networks:
      coreconextdev:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    hostname: managegui.docker
    depends_on:
      engine:
        condition: service_healthy

  manageserver:
    image: ghcr.io/openconext/openconext-manage/manage-server:latest
    environment:
      USE_SYSTEM_CA_CERTS: true
    volumes:
      - ./manage/:/config/
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    networks:
      coreconextdev:
    entrypoint: /__cacert_entrypoint.sh
    command: java -jar app.jar --spring.profiles.active=devconf  --spring.config.location=/config/
    hostname: manageserver.docker
    working_dir: /
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/internal/health",
        ]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 10s
    depends_on:
      mongo:
        condition: service_healthy

  oidcng:
    image: ghcr.io/openconext/openconext-oidcng/oidcng:latest
    networks:
      coreconextdev:
    volumes:
      - ./oidcng/:/config/
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: oidcng.docker
    working_dir: /
    depends_on:
      mongo:
        condition: service_healthy
    profiles:
      - "oidc"
      - "teams"
      - "extras"
      - "invite"

  oidcplaygroundgui:
    image: ghcr.io/openconext/openconext-oidc-playground/oidc-playground-gui:3.0.1
    networks:
      coreconextdev:
    hostname: oidcplaygroundgui.docker
    profiles:
      - "oidc"
      - "teams"
      - "extras"

  oidcplaygroundserver:
    image: ghcr.io/openconext/openconext-oidc-playground/oidc-playground-server:3.0.1
    environment:
      USE_SYSTEM_CA_CERTS: true
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    networks:
      coreconextdev:
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: oidcplaygroundserver.docker
    working_dir: /
    profiles:
      - "oidc"
      - "teams"
      - "extras"

  teamsgui:
    image: ghcr.io/openconext/openconext-teams-ng/teams-gui:9.3.1
    volumes:
      - ./:/config
    environment:
      HTTPD_CSP: ""
      HTTPD_SERVERNAME: "teams.dev.openconext.local"
      OPENCONEXT_INSTANCENAME: "OpenConext dev"
      OPENCONEXT_ENGINE_LOGOUT_URL: "https://engine.dev.openconext.local/logout"
      OPENCONEXT_HELP_EMAIL: "support@openconext.org"
      SHIB_ENTITYID: "https://teams.dev.openconext.local/shibboleth"
      SHIB_REMOTE_ENTITYID: "https://engine.dev.openconext.local/authentication/idp/metadata"
      SHIB_REMOTE_METADATA: "https://engine.dev.openconext.local/authentication/idp/metadata"
    networks:
      coreconextdev:
    hostname: teamsgui.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    profiles:
      - "teams"
      - "extras"

  teamsserver:
    image: ghcr.io/openconext/openconext-teams-ng/teams-server:9.3.1
    environment:
      USE_SYSTEM_CA_CERTS: true
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    networks:
      coreconextdev:
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: teamsserver.docker
    working_dir: /
    profiles:
      - "teams"
      - "extras"

  inviteserver:
    image: ghcr.io/openconext/openconext-invite/inviteserver:snapshot
    environment:
      USE_SYSTEM_CA_CERTS: true
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    networks:
      coreconextdev:
    entrypoint: /__cacert_entrypoint.sh
    depends_on:
      oidcng:
        condition: service_started
      mariadb:
        condition: service_healthy
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: inviteserver.docker
    working_dir: /
    profiles:
      - "php"
      - "teams"
      - "extras"
      - "invite"

  inviteclient:
    image: ghcr.io/openconext/openconext-invite/inviteclient:0.0.23
    volumes:
      - ./:/config
    environment:
      HTTPD_CSP: ""
      HTTPD_SERVERNAME: "invite.dev.openconext.local"
    networks:
      coreconextdev:
    hostname: inviteclient.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      inviteserver:
        condition: service_started
    profiles:
      - "extras"
      - "teams"
      - "invite"

  invitewelcome:
    image: ghcr.io/openconext/openconext-invite/invitewelcome:0.0.23
    volumes:
      - ./:/config
    environment:
      HTTPD_CSP: ""
      HTTPD_SERVERNAME: "invite.dev.openconext.local"
    networks:
      coreconextdev:
    hostname: inviteclient.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      inviteserver:
        condition: service_started
    profiles:
      - "extras"
      - "teams"
      - "invite"

  voot:
    image: ghcr.io/openconext/openconext-voot/voot:6.2.0
    environment:
      USE_SYSTEM_CA_CERTS: true
    networks:
      coreconextdev:
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: voot.docker
    working_dir: /
    profiles:
      - "teams"
      - "extras"
  aa:
    image: ghcr.io/openconext/openconext-attribute-aggregation/aa-server:3.2.0
    environment:
      USE_SYSTEM_CA_CERTS: true
    networks:
      coreconextdev:
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: aa.docker
    working_dir: /
    profiles:
      - "teams"
      - "extras"
      - "php"

  pdpserver:
    image: ghcr.io/openconext/openconext-pdp/pdp-server:5.1.0
    environment:
      USE_SYSTEM_CA_CERTS: true
    networks:
      coreconextdev:
    volumes:
      - ./haproxy/haproxy.crt:/certificates/haproxy.crt
      - ./pdp/application.properties:/application.properties
      - ./cacert/__cacert_entrypoint.sh:/__cacert_entrypoint.sh
    entrypoint: /__cacert_entrypoint.sh
    command: "java -jar app.jar --spring.profiles.active=devconf"
    hostname: pdpserver.docker
    working_dir: /
    profiles:
      - "extras"
      - "teams"

  pdpgui:
    image: ghcr.io/openconext/openconext-pdp/pdp-gui:5.1.0
    volumes:
      - ./:/config
    environment:
      HTTPD_CSP: ""
      HTTPD_SERVERNAME: "pdp.dev.openconext.local"
      OPENCONEXT_INSTANCENAME: "OpenConext dev"
      OPENCONEXT_ENGINE_LOGOUT_URL: "https://engine.dev.openconext.local/logout"
      OPENCONEXT_HELP_EMAIL: "support@openconext.org"
      SHIB_ENTITYID: "https://pdp.dev.openconext.local/shibboleth"
      SHIB_REMOTE_ENTITYID: "https://engine.dev.openconext.local/authentication/idp/metadata"
      SHIB_REMOTE_METADATA: "https://engine.dev.openconext.local/authentication/idp/metadata"
    networks:
      coreconextdev:
    hostname: pdpgui.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    profiles:
      - "extras"
      - "teams"

  userlifecycle:
    image: ghcr.io/openconext/openconext-user-lifecycle/user-lifecycle:prod
    environment:
      APP_ENV: prod
    volumes:
      - ./:/config
      - ./userlifecycle/parameters.yml:/var/www/html/config/legacy/parameters.yml
    networks:
      coreconextdev:
    hostname: userlifecycle.docker
    depends_on:
      engine:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    profiles:
      - "extras"
      - "php"

  mailcatcher:
    image: sj26/mailcatcher:latest
    ports:
      - 1080:1080
    command: "--ip 0.0.0.0 --smtp-port 25"
    networks:
      coreconextdev:
    hostname: mailcatcher.docker

  redis:
    image: "redis"
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      timeout: 5s
      retries: 10
    networks:
      coreconextdev:
    hostname: redis.docker
    profiles:
      - "sbs"

  # This is apache RP
  #   client -> docroot
  #   api    -> sbs-server:8080
  sbs:
    image: ghcr.io/surfscz/sram-sbs-client:main
    networks:
      coreconextdev:
    hostname: sbs.docker
    depends_on:
      sbs-server:
        condition: service_healthy
    profiles:
      - "sbs"

  sbs-server:
    image: ghcr.io/surfscz/sram-sbs-server:main
    volumes:
      - ./sbs/config:/opt/sbs/config
    networks:
      coreconextdev:
    healthcheck:
      test: ["CMD", "curl", "--fail", "-s", "http://localhost:8080/health"]
      timeout: 5s
      retries: 10
    hostname: sbs-server.docker
    depends_on:
      redis:
        condition: service_healthy
      mariadb:
        condition: service_healthy
    profiles:
      - "sbs"

  chrome:
    image: alpeware/chrome-headless-trunk
    ports:
      - 9222:9222
    environment:
      - CHROME_OPTS=--ignore-certificate-errors --window-size=1920,1080 --ignore-ssl-errors
    volumes:
      - /tmp/chromedata/:/data
    networks:
      coreconextdev:
        aliases:
          - chrome.dev.openconext.local
    profiles:
      - "test"

networks:
  coreconextdev:
    driver: bridge

volumes:
  openconext_mariadb:
  openconext_mongodb:
